;;;                                ********
;;;
;;; Copyright 1992 by BBN Systems and Technologies, A division of Bolt,
;;; Beranek and Newman Inc.
;;; 
;;; Permission to use, copy, modify and distribute this software and its
;;; documentation is hereby granted without fee, provided that the above
;;; copyright notice and this permission appear in all copies and in
;;; supporting documentation, and that the name Bolt, Beranek and Newman
;;; Inc. not be used in advertising or publicity pertaining to distribution
;;; of the software without specific, written prior permission.  In
;;; addition, BBN makes no respresentation about the suitability of this
;;; software for any purposes.  It is provided "AS IS" without express or
;;; implied warranties including (but not limited to) all implied warranties
;;; of merchantability and fitness.  In no event shall BBN be liable for any
;;; special, indirect or consequential damages whatsoever resulting from
;;; loss of use, data or profits, whether in an action of contract,
;;; negligence or other tortuous action, arising out of or in connection
;;; with the use or performance of this software.
;;; 
;;;                                 ********
;;; 
;;;regblock_memtop	=	0
regblock_stackguard	=	4
regblock_val	=	8
regblock_env	=	12
regblock_temp	=	16
regblock_expr	=	20
regblock_return	=	24
regblock_lexpr_actuals	=	28
regblock_temporaries	=	40
regblock_ntemps	=	50
regblock_entries	=	(regblock_temporaries + (regblock_ntemps * 4))
regblock_nentries	=	20
offset_return_to_interpreter	=	(regblock_entries + (15 * 6))
regblock_messages	=	(regblock_entries + (regblock_nentries * 6))
regblock_entries_2	=	(regblock_messages + 192)
regblock_nentries_2	=	40
regblock_length	=	(regblock_entries_2 + (regblock_nentries_2 * 6))
offset_fake_uuo_link_trap	=	(regblock_entries_2 + 6)
offset_uuo_link_trap	=	(regblock_entries_2 + (21 * 6))
prim_done	=	-1
prim_do_expression	=	-2
prim_apply	=	-3
prim_interrupt	=	-4
prim_no_trap_eval	=	-5
prim_no_trap_apply	=	-6
prim_pop_return	=	-7
primitive_index_mask	=	0x00000fff
tc_null	=	0x00
tc_manifest_vector	=	0x00
tc_list	=	0x01
tc_flonum	=	0x06
tc_true	=	0x08
tc_vector	=	0x0a
tc_return_code	=	0x0b
tc_compiled_procedure	=	0x0d
tc_environment	=	0x12
tc_fixnum	=	0x1a
tc_hunk3	=	0x24
tc_manifest_nm_vector	=	0x27
tc_reference_trap	=	0x32
tc_return_address	=	0x39
tc_compiled_code_block	=	0x3d
err_wrong_number_of_arguments	=	0x0c
err_compiled_code_error	=	0x31
err_unimplemented_primitive	=	0x33
int_gc_bit	=	2
fobject_compiler_error_procedure	=	0x21*4
rc_comp_reference_restart	=	0x1f
rc_comp_assignment_restart	=	0x28
rc_comp_interrupt_restart	=	0x43
rc_comp_lookup_apply_restart	=	0x4b
rc_comp_access_restart	=	0x4c
rc_comp_unassigned_p_restart	=	0x4d
rc_comp_unbound_p_restart	=	0x4e
rc_comp_definition_restart	=	0x4f
rc_comp_lexpr_interrupt_restart	=	0x50
rc_comp_safe_reference_restart	=	0x51
rc_comp_cache_lookup_restart	=	0x52
rc_comp_lookup_trap_restart	=	0x53
rc_comp_assignment_trap_restart	=	0x54
rc_comp_cache_operator_restart	=	0x55
rc_comp_op_ref_trap_restart	=	0x56
rc_comp_cache_reference_apply_restart	=	0x57
rc_comp_safe_ref_trap_restart	=	0x58
rc_comp_unassigned_p_trap_restart	=	0x59
rc_comp_cache_assignment_restart	=	0x5A
	.data
	.globl	_Registers	
_Registers:	
	.skip	regblock_length	
	.globl	_compiler_utilities	
_compiler_utilities:	
	.skip	4	
	.globl	_return_to_interpreter	
_return_to_interpreter:	
	.skip	4	
	.globl	_fake_uuo_link_trap	
_fake_uuo_link_trap:	
	.skip	4	
	.globl	_uuo_link_trap	
_uuo_link_trap:	
	.skip	4	
	.globl	c_save_stack	
c_save_stack:	
	.skip	4	
	.text
	.globl	_enter_compiled_expression	
_enter_compiled_expression:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a6@(regblock_expr),d0	
	andl	d7,d0	
	movl	d0,a0	
	jmp	a0@	
	.globl	_apply_compiled_procedure	
_apply_compiled_procedure:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@+,d0	
	.globl	apply_compiled_procedure_common	
apply_compiled_procedure_common:	
	movl	a7@,d1	
	andl	d7,d1	
	movl	d1,a1	
	movl	a1@,d1	
	andl	d7,d1	
	movl	d1,a0	
	jmp	a0@	
	.globl	return_to_interpreter_error	
return_to_interpreter_error:	
	movl	_compiled_code_error_code,d0	
	tstl	d0	
	blts	return_to_interpreter	
	movl	#err_compiled_code_error,d0	
	bras	return_to_interpreter	
	.globl	compiler_return_to_interpreter	
compiler_return_to_interpreter:	
	moveq	#prim_done,d0	
	.globl	return_to_interpreter	
return_to_interpreter:	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	moveml	a7@+,d2-d7/a0-a6	
	rts
	.globl	compiler_error	
compiler_error:	
	movl	_Fixed_Objects,d1	
	andl	d7,d1	
	movl	d1,a0	
	movl	a0@(fobject_compiler_error_procedure),a7@-	
	.globl	compiler_apply	
compiler_apply:	
	cmpb	#tc_compiled_procedure,a7@	
	beqs	apply_compiled_procedure_common	
	extl	d0	
	movl	d0,a7@-	
	moveq	#prim_apply,d0	
	bras	return_to_interpreter	
	.globl	_return_to_compiled_code	
_return_to_compiled_code:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	clrb	a7@	
	rts
	.globl	compiler_primitive_apply	
compiler_primitive_apply:	
	movl	d6,a6@(regblock_expr)	
	andl	#primitive_index_mask,d6	
	movl	sp,_Ext_Stack_Pointer	
	movl	a5,_Free	
	jsr	@(_Primitive_Procedure_Table,d6:w:4)@(0)	
	movl	_Free,a5	
	movl	d0,a6@(regblock_val)	
	addl	@(_Primitive_Count_Table,d6:w:4),sp	
	clrb	a7@	
	rts
	.globl	comentry_primitive_lexpr_apply	
comentry_primitive_lexpr_apply:	
	movl	d6,a6@(regblock_expr)	
	andl	#primitive_index_mask,d6	
	movl	sp,_Ext_Stack_Pointer	
	movl	a5,_Free	
	jsr	@(_Primitive_Procedure_Table,d6:w:4)@(0)	
	movl	_Free,a5	
	movl	d0,a6@(regblock_val)	
	movl	a6@(regblock_lexpr_actuals),d0	
	lea	a7@(0,d0:w:4),sp	
	clrb	a7@	
	rts
	.globl	compiler_lookup_apply	
compiler_lookup_apply:	
	extl	d0	
	movl	d0,a7@-	
	movl	d5,a7@-	
	movl	d4,a7@-	
compiler_lookup_apply_1:	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	d5,a7@-	
	movl	d4,a7@-	
	jsr	_Lex_Ref	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	compiler_lookup_apply_error	
	addql	#8,sp	
	movl	a7@,d0	
	movl	a6@(regblock_val),a7@	
	bra	compiler_apply	
compiler_lookup_apply_error:	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_lookup_apply_restart,a7@-	
	movl	d0,_compiled_code_error_code	
	bra	return_to_interpreter_error	
	.globl	_comp_lookup_apply_restart	
_comp_lookup_apply_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,d4	
	movl	a7@(4),d5	
	bra	compiler_lookup_apply_1	
	.globl	compiler_reference	
compiler_reference:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a1,a7@-	
	movl	a0,a7@-	
compiler_reference_1:	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a1,a7@-	
	movl	a0,a7@-	
	jsr	_Lex_Ref	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	compiler_reference_error	
	addql	#8,sp	
	movl	a6@(regblock_val),d0	
	clrb	a7@	
	rts
compiler_reference_error:	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_reference_restart,a7@-	
	movl	d0,_compiled_code_error_code	
	bra	return_to_interpreter_error	
	.globl	_comp_reference_restart	
_comp_reference_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,a0	
	movl	a7@(4),a1	
	movl	a0,a6@(regblock_env)	
	bra	compiler_reference_1	
	.globl	compiler_safe_reference	
compiler_safe_reference:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a1,a7@-	
	movl	a0,a7@-	
compiler_safe_reference_1:	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a1,a7@-	
	movl	a0,a7@-	
	jsr	_safe_lex_ref	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	compiler_safe_reference_error	
	addql	#8,sp	
	movl	a6@(regblock_val),d0	
	clrb	a7@	
	rts
compiler_safe_reference_error:	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_safe_reference_restart,a7@-	
	movl	d0,_compiled_code_error_code	
	bra	return_to_interpreter_error	
	.globl	_comp_safe_reference_restart	
_comp_safe_reference_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,a0	
	movl	a7@(4),a1	
	movl	a0,a6@(regblock_env)	
	bra	compiler_safe_reference_1	
	.globl	compiler_access	
compiler_access:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a1,a7@-	
	movl	a0,a7@-	
compiler_access_1:	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a1,a7@-	
	movl	a0,a7@-	
	jsr	_Symbol_Lex_Ref	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	compiler_access_error	
	addql	#8,sp	
	movl	a6@(regblock_val),d0	
	clrb	a7@	
	rts
compiler_access_error:	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_access_restart,a7@-	
	movl	d0,_compiled_code_error_code	
	bra	return_to_interpreter_error	
	.globl	_comp_access_restart	
_comp_access_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,a0	
	movl	a7@(4),a1	
	movl	a0,a6@(regblock_env)	
	bra	compiler_access_1	
	.globl	compiler_unassigned_p	
compiler_unassigned_p:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a1,a7@-	
	movl	a0,a7@-	
compiler_unassigned_p_1:	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a1,a7@-	
	movl	a0,a7@-	
	jsr	_Symbol_Lex_unassigned_p	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	compiler_unassigned_p_error	
	addql	#8,sp	
	movl	a6@(regblock_val),d0	
	clrb	a7@	
	rts
compiler_unassigned_p_error:	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_unassigned_p_restart,a7@-	
	movl	d0,_compiled_code_error_code	
	bra	return_to_interpreter_error	
	.globl	_comp_unassigned_p_restart	
_comp_unassigned_p_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,a0	
	movl	a7@(4),a1	
	movl	a0,a6@(regblock_env)	
	bra	compiler_unassigned_p_1	
	.globl	compiler_unbound_p	
compiler_unbound_p:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a1,a7@-	
	movl	a0,a7@-	
compiler_unbound_p_1:	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a1,a7@-	
	movl	a0,a7@-	
	jsr	_Symbol_Lex_unbound_p	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	compiler_unbound_p_error	
	addql	#8,sp	
	movl	a6@(regblock_val),d0	
	clrb	a7@	
	rts
compiler_unbound_p_error:	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_unbound_p_restart,a7@-	
	movl	d0,_compiled_code_error_code	
	bra	return_to_interpreter_error	
	.globl	_comp_unbound_p_restart	
_comp_unbound_p_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,a0	
	movl	a7@(4),a1	
	movl	a0,a6@(regblock_env)	
	bra	compiler_unbound_p_1	
	.globl	compiler_assignment	
compiler_assignment:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a2,a7@-	
	movl	a1,a7@-	
	movl	a0,a7@-	
compiler_assignment_1:	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a2,a7@-	
	movl	a1,a7@-	
	movl	a0,a7@-	
	jsr	_Lex_Set	
	lea	a7@(12),sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	compiler_assignment_error	
	lea	a7@(12),sp	
	movl	a6@(regblock_val),d0	
	clrb	a7@	
	rts
compiler_assignment_error:	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_assignment_restart,a7@-	
	movl	d0,_compiled_code_error_code	
	bra	return_to_interpreter_error	
	.globl	_comp_assignment_restart	
_comp_assignment_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,a0	
	movl	a7@(4),a1	
	movl	a7@(8),a2	
	movl	a0,a6@(regblock_env)	
	bra	compiler_assignment_1	
	.globl	compiler_definition	
compiler_definition:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a2,a7@-	
	movl	a1,a7@-	
	movl	a0,a7@-	
compiler_definition_1:	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a2,a7@-	
	movl	a1,a7@-	
	movl	a0,a7@-	
	jsr	_Local_Set	
	lea	a7@(12),sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	compiler_definition_error	
	lea	a7@(12),sp	
	movl	a6@(regblock_val),d0	
	clrb	a7@	
	rts
compiler_definition_error:	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_definition_restart,a7@-	
	movl	d0,_compiled_code_error_code	
	bra	return_to_interpreter_error	
	.globl	_comp_definition_restart	
_comp_definition_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,a0	
	movl	a7@(4),a1	
	movl	a7@(8),a2	
	movl	a0,a6@(regblock_env)	
	bra	compiler_definition_1	
	.globl	comentry_cache_lookup	
comentry_cache_lookup:	
	moveq	#1,d1	
	.globl	comentry_cache_lookup_multiple	
comentry_cache_lookup_multiple:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a1,d0	
	subl	a0,d0	
	lsrl	#2,d0	
	movw	d1,a7@-	
	movw	#tc_fixnum*0x100,a7@-	
	movl	d0,a7@-	
	movb	#tc_fixnum,a7@	
	movl	a0,a7@-	
	movb	#tc_compiled_code_block,a7@	
	dbf	d1,comentry_cache_lookup_retry	
	bras	comentry_cache_lookup_done	
comentry_cache_lookup_loop:	
	movl	a7@(4),d0	
	addql	#1,d0	
	movl	d0,a7@(4)	
comentry_cache_lookup_retry:	
	andl	d7,d0	
	movw	d1,a7@(10)	
	movl	a7@,d2	
	andl	d7,d2	
	movl	d2,a0	
	movl	a0@(0,d0:l:4),d2	
	movl	a7@,a0	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	d0,a7@-	
	movl	a0,a7@-	
	movl	d2,a7@-	
	jsr	_compiler_cache_lookup	
	lea	a7@(12),sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	comentry_cache_lookup_error	
	movw	a7@(10),d1	
	dbf	d1,comentry_cache_lookup_loop	
comentry_cache_lookup_done:	
	clrb	a7@	
	movl	a7@+,a0	
	addql	#8,sp	
	clrb	a7@	
	rts
comentry_cache_lookup_error:	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_cache_lookup_restart,a7@-	
	movl	d0,_compiled_code_error_code	
	bra	return_to_interpreter_error	
	.globl	_comp_cache_lookup_restart	
_comp_cache_lookup_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,d0	
	andl	d7,d0	
	movl	d0,a0	
	movl	a0@,d0	
	andl	d7,d0	
	movl	a0@(0,d0:l:4),a6@(regblock_env)	
	movw	a7@(10),d1	
	movl	a7@(4),d0	
	bra	comentry_cache_lookup_retry	
	.globl	comentry_cache_assignment	
comentry_cache_assignment:	
	moveq	#1,d1	
	.globl	comentry_cache_assignment_multiple	
comentry_cache_assignment_multiple:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a1,d0	
	subl	a0,d0	
	lsrl	#2,d0	
	movw	d1,a7@-	
	movw	#tc_fixnum*0x100,a7@-	
	movl	d0,a7@-	
	movb	#tc_fixnum,a7@	
	movl	a0,a7@-	
	movb	#tc_compiled_code_block,a7@	
	dbf	d1,comentry_cache_assignment_retry	
	bras	comentry_cache_assignment_done	
comentry_cache_assignment_loop:	
	movl	a7@(4),d0	
	addql	#1,d0	
	movl	d0,a7@(4)	
comentry_cache_assignment_retry:	
	andl	d7,d0	
	movw	d1,a7@(10)	
	movl	a7@,d2	
	andl	d7,d2	
	movl	d2,a0	
	movl	a0@(0,d0:l:4),d2	
	movl	a7@,a0	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	d0,a7@-	
	movl	a0,a7@-	
	movl	d2,a7@-	
	jsr	_compiler_cache_assignment	
	lea	a7@(12),sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	comentry_cache_assignment_error	
	movw	a7@(10),d1	
	dbf	d1,comentry_cache_assignment_loop	
comentry_cache_assignment_done:	
	clrb	a7@	
	movl	a7@+,a0	
	addql	#8,sp	
	clrb	a7@	
	rts
comentry_cache_assignment_error:	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_cache_assignment_restart,a7@-	
	movl	d0,_compiled_code_error_code	
	bra	return_to_interpreter_error	
	.globl	_comp_cache_assignment_restart	
_comp_cache_assignment_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,d0	
	andl	d7,d0	
	movl	d0,a0	
	movl	a0@,d0	
	andl	d7,d0	
	movl	a0@(0,d0:l:4),a6@(regblock_env)	
	movw	a7@(10),d1	
	movl	a7@(4),d0	
	bra	comentry_cache_assignment_retry	
	.globl	comentry_cache_operator	
comentry_cache_operator:	
	moveq	#1,d1	
	.globl	comentry_cache_operator_multiple	
comentry_cache_operator_multiple:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a1,d0	
	subl	a0,d0	
	lsrl	#2,d0	
	movw	d1,a7@-	
	movw	#tc_fixnum*0x100,a7@-	
	movl	d0,a7@-	
	movb	#tc_fixnum,a7@	
	movl	a0,a7@-	
	movb	#tc_compiled_code_block,a7@	
	dbf	d1,comentry_cache_operator_retry	
	bras	comentry_cache_operator_done	
comentry_cache_operator_loop:	
	movl	a7@(4),d0	
	addql	#1,d0	
	movl	d0,a7@(4)	
comentry_cache_operator_retry:	
	andl	d7,d0	
	movw	d1,a7@(10)	
	movl	a7@,d2	
	andl	d7,d2	
	movl	d2,a0	
	movl	a0@(0,d0:l:4),d2	
	movl	a7@,a0	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	d0,a7@-	
	movl	a0,a7@-	
	movl	d2,a7@-	
	jsr	_compiler_cache_operator	
	lea	a7@(12),sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	comentry_cache_operator_error	
	movw	a7@(10),d1	
	dbf	d1,comentry_cache_operator_loop	
comentry_cache_operator_done:	
	clrb	a7@	
	movl	a7@+,a0	
	addql	#8,sp	
	clrb	a7@	
	rts
comentry_cache_operator_error:	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_cache_operator_restart,a7@-	
	movl	d0,_compiled_code_error_code	
	bra	return_to_interpreter_error	
	.globl	_comp_cache_operator_restart	
_comp_cache_operator_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,d0	
	andl	d7,d0	
	movl	d0,a0	
	movl	a0@,d0	
	andl	d7,d0	
	movl	a0@(0,d0:l:4),a6@(regblock_env)	
	movw	a7@(10),d1	
	movl	a7@(4),d0	
	bra	comentry_cache_operator_retry	
	.globl	compiled_entry_to_block	
compiled_entry_to_block:	
	andl	d7,d1	
	movl	d1,a0	
	bras	enter_compiled_entry_to_block_loop	
compiled_entry_to_block_loop:	
	lea	a0@(1),a0	
enter_compiled_entry_to_block_loop:	
	movw	a0@(-2),d1	
	subw	d1,a0	
	lsrw	#1,d1	
	bcss	compiled_entry_to_block_loop	
	rts
	.globl	comentry_lookup_trap	
comentry_lookup_trap:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a0,a7@-	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a0,a7@-	
	jsr	_compiler_lookup_trap	
	addql	#4,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	comentry_lookup_trap_error	
	addql	#4,sp	
	movl	a6@(regblock_val),d0	
	clrb	a7@	
	rts
comentry_lookup_trap_error:	
	movl	a7@(4),d1	
	bsr	compiled_entry_to_block	
	movl	d0,_compiled_code_error_code	
	movl	a0@,d0	
	andl	d7,d0	
	movl	a0@(0,d0:l:4),a0	
	movl	a7@,a1	
	movl	a0,a7@	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a0,a7@-	
	movl	a1,a7@-	
	jsr	_compiler_var_error	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	d0,a7@-	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_lookup_trap_restart,a7@-	
	bra	return_to_interpreter_error	
	.globl	_comp_lookup_trap_restart	
_comp_lookup_trap_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,d0	
	movl	a7@(4),d1	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	d0,a7@-	
	movl	d1,a7@-	
	jsr	_Symbol_Lex_Ref	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	beqs	comentry_lookup_trap_restart_continue	
	movl	d0,_compiled_code_error_code	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_lookup_trap_restart,a7@-	
	bra	return_to_interpreter_error	
comentry_lookup_trap_restart_continue:	
	addql	#8,sp	
	movl	a6@(regblock_val),d0	
	clrb	a7@	
	rts
	.globl	comentry_safe_ref_trap	
comentry_safe_ref_trap:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a0,a7@-	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a0,a7@-	
	jsr	_compiler_safe_lookup_trap	
	addql	#4,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	comentry_safe_ref_trap_error	
	addql	#4,sp	
	movl	a6@(regblock_val),d0	
	clrb	a7@	
	rts
comentry_safe_ref_trap_error:	
	movl	a7@(4),d1	
	bsr	compiled_entry_to_block	
	movl	d0,_compiled_code_error_code	
	movl	a0@,d0	
	andl	d7,d0	
	movl	a0@(0,d0:l:4),a0	
	movl	a7@,a1	
	movl	a0,a7@	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a0,a7@-	
	movl	a1,a7@-	
	jsr	_compiler_var_error	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	d0,a7@-	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_safe_ref_trap_restart,a7@-	
	bra	return_to_interpreter_error	
	.globl	_comp_safe_ref_trap_restart	
_comp_safe_ref_trap_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,d0	
	movl	a7@(4),d1	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	d0,a7@-	
	movl	d1,a7@-	
	jsr	_safe_symbol_lex_ref	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	beqs	comentry_safe_ref_trap_restart_continue	
	movl	d0,_compiled_code_error_code	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_safe_ref_trap_restart,a7@-	
	bra	return_to_interpreter_error	
comentry_safe_ref_trap_restart_continue:	
	addql	#8,sp	
	movl	a6@(regblock_val),d0	
	clrb	a7@	
	rts
	.globl	comentry_unassigned_p_trap	
comentry_unassigned_p_trap:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a0,a7@-	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a0,a7@-	
	jsr	_compiler_unassigned_p_trap	
	addql	#4,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	comentry_unassigned_p_trap_error	
	addql	#4,sp	
	movl	a6@(regblock_val),d0	
	clrb	a7@	
	rts
comentry_unassigned_p_trap_error:	
	movl	a7@(4),d1	
	bsr	compiled_entry_to_block	
	movl	d0,_compiled_code_error_code	
	movl	a0@,d0	
	andl	d7,d0	
	movl	a0@(0,d0:l:4),a0	
	movl	a7@,a1	
	movl	a0,a7@	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a0,a7@-	
	movl	a1,a7@-	
	jsr	_compiler_var_error	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	d0,a7@-	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_unassigned_p_trap_restart,a7@-	
	bra	return_to_interpreter_error	
	.globl	_comp_unassigned_p_trap_restart	
_comp_unassigned_p_trap_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,d0	
	movl	a7@(4),d1	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	d0,a7@-	
	movl	d1,a7@-	
	jsr	_Symbol_Lex_unassigned_p	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	beqs	comentry_unassigned_p_trap_restart_continue	
	movl	d0,_compiled_code_error_code	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_unassigned_p_trap_restart,a7@-	
	bra	return_to_interpreter_error	
comentry_unassigned_p_trap_restart_continue:	
	addql	#8,sp	
	movl	a6@(regblock_val),d0	
	clrb	a7@	
	rts
	.globl	comentry_cache_reference_apply	
comentry_cache_reference_apply:	
	movl	a1,a7@-	
	movb	#tc_compiled_code_block,a7@	
	extl	d0	
	movl	d0,a7@-	
	movl	a3,a7@-	
comentry_cache_reference_apply_1:	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a3,a7@-	
	jsr	_compiler_lookup_trap	
	addql	#4,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	comentry_cache_reference_apply_error	
	addql	#4,sp	
	movl	a7@+,d0	
	movl	a6@(regblock_val),a7@	
	bra	compiler_apply	
comentry_cache_reference_apply_error:	
	movl	a7@(8),d1	
	andl	d7,d1	
	movl	d1,a0	
	movl	d0,_compiled_code_error_code	
	movl	a0@,d0	
	andl	d7,d0	
	movl	a0@(0,d0:l:4),a0	
	movl	a7@,a1	
	movl	a0,a7@	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a0,a7@-	
	movl	a1,a7@-	
	jsr	_compiler_var_error	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	d0,a7@-	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_cache_reference_apply_restart,a7@-	
	bra	return_to_interpreter_error	
	.globl	_comp_cache_ref_apply_restart	
_comp_cache_ref_apply_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,d0	
	movl	a7@(4),d1	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	d0,a7@-	
	movl	d1,a7@-	
	jsr	_Symbol_Lex_Ref	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	beqs	comentry_cache_ref_restart_continue	
	movl	d0,_compiled_code_error_code	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_cache_reference_apply_restart,a7@-	
	bra	return_to_interpreter_error	
comentry_cache_ref_restart_continue:	
	addql	#8,sp	
	movl	a7@+,d0	
	movl	a6@(regblock_val),a7@	
	bra	compiler_apply	
	.globl	comentry_assignment_trap	
comentry_assignment_trap:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a1,a7@-	
	movl	a0,a7@-	
comentry_assignment_trap_1:	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a1,a7@-	
	movl	a0,a7@-	
	jsr	_compiler_assignment_trap	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	comentry_assignment_trap_error	
	addql	#8,sp	
	clrb	a7@	
	rts
comentry_assignment_trap_error:	
	movl	a7@(8),d1	
	bsr	compiled_entry_to_block	
	movl	d0,_compiled_code_error_code	
	movl	a0@,d0	
	andl	d7,d0	
	movl	a0@(0,d0:l:4),a0	
	movl	a7@,a1	
	movl	a0,a7@	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	a0,a7@-	
	movl	a1,a7@-	
	jsr	_compiler_var_error	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	d0,a7@-	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_assignment_trap_restart,a7@-	
	bra	return_to_interpreter_error	
	.globl	_comp_assignment_trap_restart	
_comp_assignment_trap_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@,d0	
	movl	a7@(4),d1	
	movl	a7@(8),d2	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	d2,a7@-	
	movl	d0,a7@-	
	movl	d1,a7@-	
	jsr	_Symbol_Lex_Set	
	lea	a7@(12),sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	beqs	comentry_assignment_trap_restart_continue	
	movl	d0,_compiled_code_error_code	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_assignment_trap_restart,a7@-	
	bra	return_to_interpreter_error	
comentry_assignment_trap_restart_continue:	
	lea	a7@(12),sp	
	clrb	a7@	
	rts
	.globl	comentry_operator_reference_trap	
comentry_operator_reference_trap:	
	extl	d0	
	movl	d0,a7@-	
	lea	a7@(4),a0	
	movl	a0@,d0	
	andl	d7,d0	
	movl	d0,a1	
	movl	a1@(4),d0	
	andl	d7,d0	
	movl	d0,a1	
	movl	a1@,d0	
	movl	a5,_Free	
	movl	sp,_Ext_Stack_Pointer	
	movl	c_save_stack,sp	
	movl	d0,a7@-	
	movl	a0,a7@-	
	jsr	_complr_operator_reference_trap	
	addql	#8,sp	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	cmpl	#prim_done,d0	
	bnes	comentry_operator_reference_trap_error	
	movl	a7@+,d0	
	bra	compiler_apply	
comentry_operator_reference_trap_error:	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_op_ref_trap_restart,a7@-	
	movl	d0,_compiled_code_error_code	
	bra	return_to_interpreter_error	
	.globl	_comp_op_ref_trap_restart	
_comp_op_ref_trap_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@+,d0	
	movl	a7@,d1	
	andl	d7,d1	
	movl	d1,a0	
	movl	a0@(4),d1	
	andl	d7,d1	
	movl	d1,a0	
	movl	a0@(4),d1	
	andl	d7,d1	
	movl	a0@(8),d2	
	andl	d7,d2	
	movl	d1,a0	
	movl	a0@(0,d2:l:4),a7@	
	bra	compiler_apply	
	.globl	comentry_operator_trap	
comentry_operator_trap:	
	movl	a7@,d1	
	andl	d7,d1	
	movl	d1,a0	
	movl	a0@(4),a7@	
	extl	d0	
	movl	d0,a7@-	
	moveq	#prim_apply,d0	
	bra	return_to_interpreter	
	.globl	_extract_uuo_link	
_extract_uuo_link:	
	movl	a7@(4),d0	
	andl	#0xffffff,d0	
	movl	d0,a0	
	movl	a7@(8),d0	
	movl	a0@(0,d0:l:4),d0	
	rts
	.globl	_make_uuo_link	
_make_uuo_link:	
	cmpb	#tc_compiled_procedure,a7@(4)	
	bnes	make_uuo_link_1	
	movl	a7@(12),d0	
	andl	#0xffffff,d0	
	movl	d0,a0	
	movl	a7@(16),d0	
	movl	a7@(4),a0@(0,d0:l:4)	
	moveq	#prim_done,d0	
	rts
make_uuo_link_1:	
	bsrs	uuo_link_gc_check	
	movl	_uuo_link_trap,d0	
	lea	a7@(12),a1	
	bra	make_fake_uuo_link_common	
uuo_link_gc_check:	
	movl	_Free,a0	
	cmpl	_MemTop,a0	
	bges	uuo_link_gc_check_fail	
uuo_link_gc_check_succeed:	
	rts
uuo_link_gc_check_fail:	
	bset	#int_gc_bit,_IntCode+3	
	btst	#int_gc_bit,_IntEnb+3	
	bnes	uuo_link_gc_check_succeed	
	lea	a7@(4),sp	
	lea	_Registers,a0	
	movl	#-1,a0@(regblock_memtop)	
	moveq	#prim_interrupt,d0	
	rts
	.globl	_make_fake_uuo_link	
_make_fake_uuo_link:	
	bsrs	uuo_link_gc_check	
	pea	a0@	
	movb	#tc_hunk3,a7@	
	movl	a7@(8),a0@+	
	movl	a7@(12),a0@+	
	movl	a7@(16),a0@+	
	movb	#tc_fixnum,a0@(-4)	
	movl	a7@+,d0	
	movl	d0,a7@(4)	
	movl	_fake_uuo_link_trap,d0	
	lea	a7@(8),a1	
make_fake_uuo_link_common:	
	pea	a0@	
	movb	#tc_compiled_procedure,a7@	
	movl	d0,a0@+	
	movl	a7@(8),a0@+	
	movl	a0,_Free	
	movl	a1@+,d0	
	andl	#0xffffff,d0	
	movl	d0,a0	
	movl	a1@,d0	
	movl	a7@+,a0@(0,d0:l:4)	
	moveq	#prim_done,d0	
	rts
	.globl	_compiled_block_environment	
_compiled_block_environment:	
	movl	a7@(4),d0	
	andl	#0xffffff,d0	
	movl	d0,a0	
	movl	a0@,d0	
	andl	#0xffffff,d0	
	movl	a0@(0,d0:l:4),d0	
	rts
	.globl	_extract_variable_cache	
_extract_variable_cache:	
	movl	a7@(4),d0	
	andl	#0xffffff,d0	
	movl	d0,a0	
	movl	a7@(8),d0	
	movl	a0@(0,d0:l:4),d0	
	rts
	.globl	_store_variable_cache	
_store_variable_cache:	
	movl	a7@(8),d0	
	andl	#0xffffff,d0	
	movl	d0,a0	
	movl	a7@(12),d0	
	movl	a7@(4),a0@(0,d0:l:4)	
	rts
	.globl	compiler_enclose	
compiler_enclose:	
	movl	a5,a0	
	lea	a5@(4,d0:w:4),a5	
	movl	a0,a6@(regblock_temp)	
	movb	#tc_vector,a6@(regblock_temp)	
	movw	#tc_manifest_vector*0x10000,a0@+	
	movw	d0,a0@+	
	movl	a7@+,a1	
	bras	compiler_enclose_loop_entry	
compiler_enclose_loop:	
	movl	a7@+,a0@+	
compiler_enclose_loop_entry:	
	dbf	d0,compiler_enclose_loop	
	movl	a6@(regblock_temp),a0	
	jmp	a1@	
	.globl	compiler_wrong_number_of_arguments	
compiler_wrong_number_of_arguments:	
	extl	d0	
	movl	d0,a7@-	
	movl	#err_wrong_number_of_arguments,d0	
	bra	return_to_interpreter	
	.globl	compiler_interrupt_procedure	
compiler_interrupt_procedure:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	#tc_null*0x1000000+0,a7@-	
compiler_interrupt_common:	
	tstb	a6@(regblock_memtop)	
	bmis	compiler_interrupt	
	bset	#int_gc_bit,_IntCode+3	
	btst	#int_gc_bit,_IntEnb+3	
	bnes	compiler_interrupt_common_1	
	addql	#4,sp	
	clrb	a7@	
	movl	a7@+,a0	
	jmp	a0@(4)	
compiler_interrupt_common_1:	
	movl	#-1,a6@(regblock_memtop)	
	.globl	compiler_interrupt	
compiler_interrupt:	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_interrupt_restart,a7@-	
	moveq	#prim_interrupt,d0	
	bra	return_to_interpreter	
	.globl	compiler_interrupt_continuation	
compiler_interrupt_continuation:	
	addql	#2,a7@	
	movb	#tc_return_address,a7@	
	movl	a6@(regblock_val),a7@-	
	bras	compiler_interrupt_common	
	.globl	_comp_interrupt_restart	
_comp_interrupt_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@+,a6@(regblock_val)	
	clrb	a7@	
	rts
	.globl	compiler_setup_lexpr	
compiler_setup_lexpr:	
	movw	d1,d3	
	subw	d0,d3	
	blts	setup_lexpr_5	
	cmpl	a6@(regblock_memtop),a5	
	blts	setup_lexpr_10	
	bsrs	setup_lexpr_interrupt	
setup_lexpr_10:	
	movl	sp,a0	
	movw	d3,d1	
	negw	d1	
	subw	d2,d1	
	lea	a7@(0,d1:w:4),sp	
	movl	sp,a1	
setup_lexpr_1:	
	movl	a0@+,a1@+	
	dbf	d0,setup_lexpr_1	
	bras	setup_lexpr_3	
setup_lexpr_2:	
	movl	#tc_reference_trap*0x1000000+0,a1@+	
setup_lexpr_3:	
	dbf	d3,setup_lexpr_2	
	tstw	d2	
	beqs	setup_lexpr_4	
	movl	#tc_null*0x1000000+0,a1@	
setup_lexpr_4:	
	rts
setup_lexpr_5:	
	cmpw	#-1,d3	
	bnes	setup_lexpr_6	
	cmpl	a6@(regblock_memtop),a5	
	blts	setup_lexpr_11	
	bsrs	setup_lexpr_interrupt	
setup_lexpr_11:	
	lea	a7@(0,d0:w:4),a0	
	movl	a0@,d3	
	movl	a5,a0@	
	movb	#tc_list,a0@	
	movl	d3,a5@+	
	movl	#tc_null*0x1000000+0,a5@+	
	rts
setup_lexpr_6:	
	lea	a7@(4,d1:w:4),a0	
	movl	a0,a2	
	negw	d3	
	movl	d3,d4	
	bsr	compiler_list	
	tstw	d3	
	bnes	setup_lexpr_12	
	bsrs	setup_lexpr_interrupt	
	movl	d4,d3	
	bsr	compiler_list_unconditional	
setup_lexpr_12:	
	movl	a1,a0@-	
setup_lexpr_7:	
	movl	a2@-,a0@-	
	dbf	d1,setup_lexpr_7	
	movl	a0,sp	
	rts
	.globl	setup_lexpr_interrupt	
setup_lexpr_interrupt:	
	tstb	a6@(regblock_memtop)	
	bmis	compiler_lexpr_interrupt	
	bset	#int_gc_bit,_IntCode+3	
	btst	#int_gc_bit,_IntEnb+3	
	bnes	compiler_lexpr_interrupt	
	rts
	.globl	compiler_lexpr_interrupt	
compiler_lexpr_interrupt:	
	movl	#-1,a6@(regblock_memtop)	
	addql	#4,sp	
	subl	#10,a7@	
	movb	#tc_return_address,a7@	
	movw	d0,a7@-	
	movw	#tc_fixnum*0x100,a7@-	
	movw	d1,a7@-	
	movw	#tc_fixnum*0x100,a7@-	
	movw	d2,a7@-	
	movw	#tc_fixnum*0x100,a7@-	
	movl	#tc_null*0x1000000+0,a7@-	
	movl	#tc_return_code*0x1000000+rc_comp_lexpr_interrupt_restart,a7@-	
	movl	#prim_interrupt,d0	
	bra	return_to_interpreter	
	.globl	_comp_lexpr_interrupt_restart	
_comp_lexpr_interrupt_restart:	
	moveml	d2-d7/a0-a6,a7@-	
	movl	#0x00ffffff,d7	
	movl	sp,c_save_stack	
	movl	_Ext_Stack_Pointer,sp	
	movl	_Free,a5	
	lea	_Registers,a6	
	movl	a7@+,d2	
	movl	a7@+,d1	
	movl	a7@+,d0	
	clrb	a7@	
	addl	#10,a7@	
	bra	compiler_setup_lexpr	
compiler_list:	
	moveml	d1/a2,a7@-	
	lea	a5@(0,d3:w:8),a2	
	cmpl	a6@(regblock_memtop),a2	
	blts	compiler_list_1	
	clrw	d3	
	moveml	a7@+,d1/a2	
	rts
compiler_list_unconditional:	
	moveml	d1/a2,a7@-	
	lea	a5@(0,d3:w:8),a2	
compiler_list_1:	
	exg	a2,a5	
	movl	a2,d1	
	orl	#tc_list*0x1000000+0,d1	
	movl	d1,a1	
	subqw	#1,d3	
	bras	compiler_list_3	
compiler_list_2:	
	movl	a0@+,a2@+	
	addql	#8,d1	
	movl	d1,a2@+	
compiler_list_3:	
	dbf	d3,compiler_list_2	
	movl	a0@+,a2@+	
	movl	#tc_null*0x1000000+0,a2@	
	moveml	a7@+,d1/a2	
	rts
	.data
pc_zero_string:	
	.asciz	"ZERO?"	
pc_positive_string:	
	.asciz	"POSITIVE?"	
pc_negative_string:	
	.asciz	"NEGATIVE?"	
pc_equal_string:	
	.asciz	"&="	
pc_less_string:	
	.asciz	"&<"	
pc_greater_string:	
	.asciz	"&>"	
pc_plus_string:	
	.asciz	"&+"	
pc_minus_string:	
	.asciz	"&-"	
pc_multiply_string:	
	.asciz	"&*"	
pc_divide_string:	
	.asciz	"&/"	
pc_increment_string:	
	.asciz	"1+"	
pc_decrement_string:	
	.asciz	"-1+"	
	| .align	4	
first_pc_name:	
	.long	pc_zero_string	
	.long	pc_positive_string	
	.long	pc_negative_string	
	.long	pc_equal_string	
	.long	pc_less_string	
	.long	pc_greater_string	
	.long	pc_plus_string	
	.long	pc_minus_string	
	.long	pc_multiply_string	
	.long	pc_divide_string	
	.long	pc_increment_string	
	.long	pc_decrement_string	
last_pc_name:	
	.skip	4	
	.globl	first_pc_code	
first_pc_code:	
pc_zero:	
	.skip	4	
pc_positive:	
	.skip	4	
pc_negative:	
	.skip	4	
pc_equal:	
	.skip	4	
pc_less:	
	.skip	4	
pc_greater:	
	.skip	4	
pc_plus:	
	.skip	4	
pc_minus:	
	.skip	4	
pc_multiply:	
	.skip	4	
pc_divide:	
	.skip	4	
pc_increment:	
	.skip	4	
pc_decrement:	
	.skip	4	
	.text
unary_return_true:	
	movl	#tc_true*0x1000000+0,a6@(regblock_val)	
	addql	#4,sp	
	clrb	a7@	
	rts
	.globl	comentry_zero	
comentry_zero:	
	cmpb	#tc_fixnum,a7@	
	bnes	zero_generic	
	movl	a7@,d0	
	lsll	#8,d0	
	beq	unary_return_true	
	movl	#tc_null*0x1000000+0,a6@(regblock_val)	
	addql	#4,sp	
	clrb	a7@	
	rts
zero_generic:	
	movl	pc_zero,d6	
	bra	compiler_primitive_apply	
	.globl	comentry_positive	
comentry_positive:	
	cmpb	#tc_fixnum,a7@	
	bnes	positive_generic	
	movl	a7@,d0	
	lsll	#8,d0	
	bgt	unary_return_true	
	movl	#tc_null*0x1000000+0,a6@(regblock_val)	
	addql	#4,sp	
	clrb	a7@	
	rts
positive_generic:	
	movl	pc_positive,d6	
	bra	compiler_primitive_apply	
	.globl	comentry_negative	
comentry_negative:	
	cmpb	#tc_fixnum,a7@	
	bnes	negative_generic	
	movl	a7@,d0	
	lsll	#8,d0	
	blt	unary_return_true	
	movl	#tc_null*0x1000000+0,a6@(regblock_val)	
	addql	#4,sp	
	clrb	a7@	
	rts
negative_generic:	
	movl	pc_negative,d6	
	bra	compiler_primitive_apply	
	.globl	comentry_increment	
comentry_increment:	
	cmpb	#tc_fixnum,a7@	
	bnes	increment_generic	
	movl	a7@,d0	
	lsll	#8,d0	
	addl	#256,d0	
	bvss	increment_generic	
	lsrl	#8,d0	
	movl	d0,a6@(regblock_val)	
	movb	#tc_fixnum,a6@(regblock_val)	
	addql	#4,sp	
	clrb	a7@	
	rts
increment_generic:	
	movl	pc_increment,d6	
	bra	compiler_primitive_apply	
	.globl	comentry_decrement	
comentry_decrement:	
	cmpb	#tc_fixnum,a7@	
	bnes	decrement_generic	
	movl	a7@,d0	
	lsll	#8,d0	
	subl	#256,d0	
	bvss	decrement_generic	
	lsrl	#8,d0	
	movl	d0,a6@(regblock_val)	
	movb	#tc_fixnum,a6@(regblock_val)	
	addql	#4,sp	
	clrb	a7@	
	rts
decrement_generic:	
	movl	pc_decrement,d6	
	bra	compiler_primitive_apply	
binary_return_true:	
	movl	#tc_true*0x1000000+0,a6@(regblock_val)	
	addql	#8,sp	
	clrb	a7@	
	rts
	.globl	comentry_equal	
comentry_equal:	
	cmpb	#tc_fixnum,a7@	
	bnes	equal_generic	
	cmpb	#tc_fixnum,a7@(4)	
	bnes	equal_generic	
	movl	a7@,d0	
	lsll	#8,d0	
	movl	a7@(4),d1	
	lsll	#8,d1	
	cmpl	d1,d0	
	beq	binary_return_true	
	movl	#tc_null*0x1000000+0,a6@(regblock_val)	
	addql	#8,sp	
	clrb	a7@	
	rts
equal_generic:	
	movl	pc_equal,d6	
	bra	compiler_primitive_apply	
	.globl	comentry_less	
comentry_less:	
	cmpb	#tc_fixnum,a7@	
	bnes	less_generic	
	cmpb	#tc_fixnum,a7@(4)	
	bnes	less_generic	
	movl	a7@,d0	
	lsll	#8,d0	
	movl	a7@(4),d1	
	lsll	#8,d1	
	cmpl	d1,d0	
	blt	binary_return_true	
	movl	#tc_null*0x1000000+0,a6@(regblock_val)	
	addql	#8,sp	
	clrb	a7@	
	rts
less_generic:	
	movl	pc_less,d6	
	bra	compiler_primitive_apply	
	.globl	comentry_greater	
comentry_greater:	
	cmpb	#tc_fixnum,a7@	
	bnes	greater_generic	
	cmpb	#tc_fixnum,a7@(4)	
	bnes	greater_generic	
	movl	a7@,d0	
	lsll	#8,d0	
	movl	a7@(4),d1	
	lsll	#8,d1	
	cmpl	d1,d0	
	bgt	binary_return_true	
	movl	#tc_null*0x1000000+0,a6@(regblock_val)	
	addql	#8,sp	
	clrb	a7@	
	rts
greater_generic:	
	movl	pc_greater,d6	
	bra	compiler_primitive_apply	
	.globl	comentry_plus	
comentry_plus:	
	cmpb	#tc_fixnum,a7@	
	bnes	plus_generic	
	cmpb	#tc_fixnum,a7@(4)	
	bnes	plus_generic	
	movl	a7@,d0	
	lsll	#8,d0	
	movl	a7@(4),d1	
	lsll	#8,d1	
	addl	d1,d0	
	bvss	plus_generic	
	lsrl	#8,d0	
	movl	d0,a6@(regblock_val)	
	movb	#tc_fixnum,a6@(regblock_val)	
	addql	#8,sp	
	clrb	a7@	
	rts
plus_generic:	
	movl	pc_plus,d6	
	bra	compiler_primitive_apply	
	.globl	comentry_minus	
comentry_minus:	
	cmpb	#tc_fixnum,a7@	
	bnes	minus_generic	
	cmpb	#tc_fixnum,a7@(4)	
	bnes	minus_generic	
	movl	a7@,d0	
	lsll	#8,d0	
	movl	a7@(4),d1	
	lsll	#8,d1	
	subl	d1,d0	
	bvss	minus_generic	
	lsrl	#8,d0	
	movl	d0,a6@(regblock_val)	
	movb	#tc_fixnum,a6@(regblock_val)	
	addql	#8,sp	
	clrb	a7@	
	rts
minus_generic:	
	movl	pc_minus,d6	
	bra	compiler_primitive_apply	
	.globl	comentry_multiply	
comentry_multiply:	
	cmpb	#tc_fixnum,a7@	
	bnes	multiply_generic	
	cmpb	#tc_fixnum,a7@(4)	
	bnes	multiply_generic	
	movl	a7@,d0	
	lsll	#8,d0	
	movl	a7@(4),d1	
	lsll	#8,d1	
	asrl	#8,d1	
	mulsl	d1,d0	
	bvss	multiply_generic	
	lsrl	#8,d0	
	movl	d0,a6@(regblock_val)	
	movb	#tc_fixnum,a6@(regblock_val)	
	addql	#8,sp	
	clrb	a7@	
	rts
multiply_generic:	
	movl	pc_multiply,d6	
	bra	compiler_primitive_apply	
	.globl	comentry_divide	
comentry_divide:	
	movl	pc_divide,d6	
	bra	compiler_primitive_apply	
message_block_start:	
message_apply_closure:	
	movw	a0@,d2	
	jmp	pc@(((message_apply_closure + 14) - .),d2:w)	
	.skip	10	
	addql	#2,a0	
	addw	a0@+,a0	
	lea	a7@(0,d1:w:4),a2	
	bras	copy_invoke_loop_entry	
	.skip	6	
	addql	#2,a0	
	addw	a0@+,a0	
	movw	a0@,d2	
	jmp	pc@(((message_apply_closure + 14) - .),d2:w)	
	.skip	6	
	addql	#4,a0	
	lea	a7@(0,d1:w:4),a2	
	bras	copy_invoke_loop_entry	
	.skip	8	
message_apply_stack:	
	movw	a0@,d2	
	jmp	pc@(((message_apply_stack + 14) - .),d2:w)	
copy_invoke_loop:	
	movl	a2@-,a0@-	
copy_invoke_loop_entry:	
	dbf	d1,copy_invoke_loop	
	movl	a0,sp	
	jmp	a1@	
	lea	a7@(0,d1:w:4),a2	
	bras	copy_invoke_loop_entry	
message_apply_stack_continue:	
	addql	#2,a0	
	addw	a0@+,a0	
	movw	a0@,d2	
	jmp	pc@(((message_apply_stack + 14) - .),d2:w)	
	dbf	d0,message_apply_stack_continue	
	lea	a7@(0,d1:w:4),a2	
	bras	copy_invoke_loop_entry	
	.skip	6	
	lea	a7@(0,d1:w:4),a2	
	bras	copy_invoke_loop_entry	
	.skip	10	
message_value:	
	movw	a7@,d2	
	jmp	pc@(((message_value + 14) - .),d2:w)	
	.skip	10	
	addql	#2,sp	
	addw	a7@+,sp	
	clrb	a7@	
	rts
	.skip	8	
	addql	#2,sp	
	addw	a7@+,sp	
	movw	a7@,d2	
	jmp	pc@(((message_value + 14) - .),d2:w)	
	.skip	6	
	addql	#2,sp	
	addw	a7@+,sp	
	clrb	a7@	
	rts
	.skip	8	
	.globl	_compiler_initialize	
_compiler_initialize:	
	lea	_Registers,a0	
	lea	a0@(regblock_entries),a0	
	movw	#0x4ef9,a0@+	
	movl	#compiler_apply,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_error,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_wrong_number_of_arguments,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_interrupt_procedure,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_interrupt_continuation,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_lookup_apply,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_reference,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_access,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_unassigned_p,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_unbound_p,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_assignment,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_definition,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_primitive_apply,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_enclose,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_setup_lexpr,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_return_to_interpreter,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#compiler_safe_reference,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_cache_lookup,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_lookup_trap,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_assignment_trap,a0@+	
	lea	_Registers,a0	
	lea	a0@(regblock_entries_2),a0	
	movw	#0x4ef9,a0@+	
	movl	#comentry_cache_operator,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_operator_reference_trap,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_cache_reference_apply,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_safe_ref_trap,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_unassigned_p_trap,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_cache_lookup_multiple,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_cache_operator_multiple,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_plus,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_minus,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_multiply,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_divide,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_equal,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_less,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_greater,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_increment,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_decrement,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_zero,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_positive,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_negative,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_cache_assignment,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_cache_assignment_multiple,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_operator_trap,a0@+	
	movw	#0x4ef9,a0@+	
	movl	#comentry_primitive_lexpr_apply,a0@+	
	lea	_Registers,a0	
	lea	a0@(regblock_messages),a0	
	lea	message_block_start,a1	
	moveq	#47,d0	
copy_message_loop:	
	movl	a1@+,a0@+	
	dbf	d0,copy_message_loop	
	tstl	a7@(4)	
	bnes	init_constant_space	
	rts
init_constant_space:	
	lea	constant_end,a0	
	movl	a0,d0	
	lea	constant_start,a0	
	subl	a0,d0	
	lsrl	#2,d0	
	movl	d0,a7@-	
	movl	d0,a7@-	
	movl	a0,a7@-	
	jsr	_copy_to_constant_space	
	addql	#8,sp	
	movl	d0,a0	
	movl	a7@+,d0	
	subql	#1,d0	
	movl	d0,a0@	
	movb	#tc_manifest_vector,a0@	
	subql	#1,d0	
	movl	d0,a0@(4)	
	movb	#tc_manifest_nm_vector,a0@(4)	
	.globl	compiler_reset	
compiler_reset:	
	movl	a0,a7@-	
	movb	#tc_compiled_code_block,a7@	
	movl	a7@,_compiler_utilities	
	movb	#tc_return_address,a7@	
	movl	a7@+,d0	
	movl	d0,d1	
	addl	#constant_return_to_interpreter-constant_start,d1	
	movl	d1,_return_to_interpreter	
	movl	d0,d1	
	addl	#constant_uuo_link_trap-constant_start,d1	
	movl	d1,_uuo_link_trap	
	addl	#constant_fake_uuo_link_trap-constant_start,d0	
	movl	d0,_fake_uuo_link_trap	
	lea	first_pc_code,a0	
	movl	a0,a7@-	
	lea	first_pc_name,a0	
	movl	a0,a7@-	
	bras	enter_primitive_loop	
primitive_loop:	
	movl	a7@,a0	
	movl	a0@,a7@-	
	jsr	_make_primitive	
	addql	#4,sp	
	movl	a7@(4),a0	
	movl	d0,a0@+	
	movl	a0,a7@(4)	
	addql	#4,a7@	
enter_primitive_loop:	
	movl	a7@,d0	
	lea	last_pc_name,a0	
	cmpl	a0,d0	
	blts	primitive_loop	
	lea	a7@(8),sp	
	rts
	.globl	_compiler_reset	
_compiler_reset:	
	cmpb	#tc_compiled_code_block,a7@(4)	
	bne	compiler_reset_error	
	movl	a7@(4),d0	
	andl	#0xffffff,d0	
	movl	d0,a0	
	movl	a0@,d1	
	andl	#0xffffff,d1	
	lea	constant_end,a1	
	movl	a1,d0	
	lea	constant_start,a1	
	subl	a1,d0	
	lsrl	#2,d0	
	subql	#1,d0	
	cmpl	d1,d0	
	bne	compiler_reset_error	
	subql	#1,d0	
	bra	compiler_reset	
compiler_reset_error:	
	jsr	_compiler_reset_error	
	rts
	| .align	4	
constant_start:	
	.long	0	
	.long	0	
	.word	constant_return_to_interpreter-constant_start	
constant_return_to_interpreter:	
	jmp	a6@(offset_return_to_interpreter)	
	.word	constant_fake_uuo_link_trap-constant_start	
constant_fake_uuo_link_trap:	
	jmp	a6@(offset_fake_uuo_link_trap)	
	.word	constant_uuo_link_trap-constant_start	
constant_uuo_link_trap:	
	jmp	a6@(offset_uuo_link_trap)	
	| .align	4	
constant_end:	
	.long	0	
