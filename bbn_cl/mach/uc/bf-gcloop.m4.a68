;;;                                ********
;;;
;;; Copyright 1992 by BBN Systems and Technologies, A division of Bolt,
;;; Beranek and Newman Inc.
;;; 
;;; Permission to use, copy, modify and distribute this software and its
;;; documentation is hereby granted without fee, provided that the above
;;; copyright notice and this permission appear in all copies and in
;;; supporting documentation, and that the name Bolt, Beranek and Newman
;;; Inc. not be used in advertising or publicity pertaining to distribution
;;; of the software without specific, written prior permission.  In
;;; addition, BBN makes no respresentation about the suitability of this
;;; software for any purposes.  It is provided "AS IS" without express or
;;; implied warranties including (but not limited to) all implied warranties
;;; of merchantability and fitness.  In no event shall BBN be liable for any
;;; special, indirect or consequential damages whatsoever resulting from
;;; loss of use, data or profits, whether in an action of contract,
;;; negligence or other tortuous action, arising out of or in connection
;;; with the use or performance of this software.
;;; 
;;;                                 ********
;;; 
;;;	.text
	.align	4	
gcloop_dispatch_table:	
TC_NULL	=	0x00
	.long	gcloop_non_pointer	
TC_LIST	=	0x01
	.long	gcloop_pair	
TC_CHARACTER	=	0x02
	.long	gcloop_non_pointer	
TC_SCODE_QUOTE	=	0x03
	.long	gcloop_pair	
TC_PCOMB2	=	0x04
	.long	gcloop_triple	
TC_UNINTERNED_SYMBOL	=	0x05
	.long	gcloop_pair	
TC_BIG_FLONUM	=	0x06
	.long	gcloop_vector	
TC_COMBINATION_1	=	0x07
	.long	gcloop_pair	
TC_TRUE	=	0x08
	.long	gcloop_non_pointer	
TC_EXTENDED_PROCEDURE	=	0x09
	.long	gcloop_pair	
TC_VECTOR	=	0x0A
	.long	gcloop_vector	
TC_RETURN_CODE	=	0x0B
	.long	gcloop_non_pointer	
TC_COMBINATION_2	=	0x0C
	.long	gcloop_triple	
TC_MANIFEST_CLOSURE	=	0x0D
	.long	gcloop_closure	
TC_BIG_FIXNUM	=	0x0E
	.long	gcloop_vector	
TC_PROCEDURE	=	0x0F
	.long	gcloop_pair	
TC_ENTITY	=	0x10
	.long	gcloop_pair	
TC_DELAY	=	0x11
	.long	gcloop_pair	
TC_ENVIRONMENT	=	0x12
	.long	gcloop_vector	
TC_DELAYED	=	0x13
	.long	gcloop_pair	
TC_EXTENDED_LAMBDA	=	0x14
	.long	gcloop_triple	
TC_COMMENT	=	0x15
	.long	gcloop_pair	
TC_NON_MARKED_VECTOR	=	0x16
	.long	gcloop_vector	
TC_LAMBDA	=	0x17
	.long	gcloop_pair	
TC_PRIMITIVE	=	0x18
	.long	gcloop_non_pointer	
TC_SEQUENCE_2	=	0x19
	.long	gcloop_pair	
TC_FIXNUM	=	0x1A
	.long	gcloop_non_pointer	
TC_PCOMB1	=	0x1B
	.long	gcloop_pair	
TC_CONTROL_POINT	=	0x1C
	.long	gcloop_vector	
TC_INTERNED_SYMBOL	=	0x1D
	.long	gcloop_pair	
TC_CHARACTER_STRING	=	0x1E
	.long	gcloop_vector	
TC_ACCESS	=	0x1F
	.long	gcloop_pair	
TC_HUNK3_A	=	0x20
	.long	gcloop_triple	
TC_DEFINITION	=	0x21
	.long	gcloop_pair	
TC_BROKEN_HEART	=	0x22
	.long	gcloop_broken_heart	
TC_ASSIGNMENT	=	0x23
	.long	gcloop_pair	
TC_HUNK3_B	=	0x24
	.long	gcloop_triple	
TC_IN_PACKAGE	=	0x25
	.long	gcloop_pair	
TC_COMBINATION	=	0x26
	.long	gcloop_vector	
TC_MANIFEST_NM_VECTOR	=	0x27
	.long	gcloop_nm_header	
TC_COMPILED_ENTRY	=	0x28
	.long	gcloop_compiled	
TC_LEXPR	=	0x29
	.long	gcloop_pair	
TC_PCOMB3	=	0x2A
	.long	gcloop_vector	
TC_MANIFEST_SPECIAL_NM_VECTOR	=	0x2B
	.long	gcloop_nm_header	
TC_VARIABLE	=	0x2C
	.long	gcloop_triple	
TC_THE_ENVIRONMENT	=	0x2D
	.long	gcloop_non_pointer	
TC_FUTURE	=	0x2E
	.long	gcloop_future	
TC_VECTOR_1B	=	0x2F
	.long	gcloop_vector	
TC_PCOMB0	=	0x30
	.long	gcloop_non_pointer	
TC_VECTOR_16B	=	0x31
	.long	gcloop_vector	
TC_REFERENCE_TRAP	=	0x32
	.long	gcloop_trap	
TC_SEQUENCE_3	=	0x33
	.long	gcloop_triple	
TC_CONDITIONAL	=	0x34
	.long	gcloop_triple	
TC_DISJUNCTION	=	0x35
	.long	gcloop_pair	
TC_CELL	=	0x36
	.long	gcloop_cell	
TC_WEAK_CONS	=	0x37
	.long	gcloop_weak_pair	
TC_QUAD	=	0x38
	.long	gcloop_quad	
TC_LINKAGE_SECTION	=	0x39
	.long	gcloop_linkage	
TC_RATNUM	=	0x3A
	.long	gcloop_pair	
TC_STACK_ENVIRONMENT	=	0x3B
	.long	gcloop_non_pointer	
TC_COMPLEX	=	0x3C
	.long	gcloop_pair	
TC_COMPILED_CODE_BLOCK	=	0x3D
	.long	gcloop_vector	
TC_EMPTY_1	=	0x3E
	.long	gcloop_non_pointer	
TC_EMPTY_2	=	0x3F
	.long	gcloop_non_pointer	
TC_G_VECTOR	=	0x40
	.long	gcloop_vector	
TC_IO_ERROR_CODE	=	0x41
	.long	gcloop_non_pointer	
TC_CL_PACKAGE	=	0x42
	.long	gcloop_vector	
TC_CLSAV	=	0x43
	.long	gcloop_vector	
TC_RATIO	=	0x44
	.long	gcloop_pair	
TC_CL_STREAM	=	0x45
	.long	gcloop_vector	
TC_VECTOR_32B	=	0x46
	.long	gcloop_vector	
TC_CL_ARRAY	=	0x47
	.long	gcloop_vector	
TC_CL_IVECTOR	=	0x48
	.long	gcloop_vector	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
	.long	gcloop_bad_type	
term_broken_heart	=	0x02
term_exit	=	0x0c
term_invalid_type_code	=	0x12
term_no_space	=	0x15
trap_max_immediate	=	0x9
future_determined_slot	=	0x4
future_lock_slot	=	0x8
future_value_slot	=	0xc
heaplet_buffer_size	=	5
heaplet_delta	=	(4*heaplet_buffer_size)
vector_delta	=	(8-heaplet_delta)
	.data
	.globl	_Transport_Bound	
_Transport_Bound:	
	.skip	4	
	.globl	_Transport_Delta	
_Transport_Delta:	
	.skip	4	
	.text
	.globl	_GCLoop	
_GCLoop:	
	link	a6,#-12	
	moveml	d2-d7/a2-a5,a7@-	
	movl	#0x00ffffff,d7	
	clrl	a6@(-4)	
	moveq	#-1,d0	
	movl	d0,a7@-	
	movl	d0,a7@-	
	movl	_Transport_Bound,d5	
	movl	_Transport_Delta,d3	
	movl	_cons_heaplet_bound,d6	
	movl	a6@(12),a0	
	movl	a0@,a5	
	movl	a5,a3	
	addl	d3,a3	
	addl	d3,d6	
	movl	_scan_heaplet_end,d4	
	subql	#4,d4	
	movl	a6@(8),a4	
	cmpl	d5,a4	
	bcc	gcloop_test	
	movl	d3,a6@(-4)	
	addl	d3,a4	
	addl	d3,d4	
	bra	gcloop_test	
gcloop_end:	
	movl	a5,d0	
	addl	d3,d0	
	cmpl	a3,d0	
	bne	gcloop_phase_error	
	movl	a6@(12),a0	
	movl	a5,a0@	
	movl	a4,d0	
	subl	a6@(-4),d0	
	lea	a7@(8),sp	
	moveml	a7@+,d2-d7/a2-a5	
	unlk	a6	
	rts
gcloop_nm_header:	
	andl	d7,d2	
	lea	a4@(0,d2:l:4),a4	
	cmpl	d4,a4	
	bcc	gcloop_scan_overflow	
gcloop_dont_relocate:	
gcloop_non_pointer:	
	addql	#4,a4	
gcloop_test:	
	cmpl	a4,a3	
	beq	gcloop_end	
gcloop_dispatch:	
	movl	a4@,d2	
	movl	d2,a7@	
	clrl	d0	
	movb	a7@,d0	
dispatch_instr:	
dispatch_dot	=	dispatch_instr+2
	movl	pc@(gcloop_dispatch_table - dispatch_dot,d0:w:4),a0	
	jmp	a0@	
gcloop_locked_relocated:	
	movl	d0,a2@	
gcloop_relocated:	
	movl	a7@,d0	
gcloop_relocated_common:	
	andl	d7,d0	
	addl	d0,d2	
	movl	d2,a4@+	
	cmpl	a4,a3	
	bne	gcloop_dispatch	
	bra	gcloop_end	
gcloop_locked:	
	movl	a2@,d0	
	cmpl	a7@(4),d0	
	beq	gcloop_locked	
	bra	gcloop_relocated_common	
gcloop_trap:	
	movl	d2,d0	
	andl	d7,d0	
	moveq	#trap_max_immediate,d1	
	cmpl	d0,d1	
	bcc	gcloop_non_pointer	
gcloop_pair:	
	movl	d2,d0	
	andl	d7,d0	
	cmpl	d5,d0	
	bcc	gcloop_dont_relocate	
	movl	d0,a2	
	subl	a2,d2	
	movl	a2@,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	gcloop_relocated	
	movl	a2,a7@	
	jsr	_atomior32	
	cmpl	a7@(4),d0	
	beq	gcloop_locked	
	movl	d0,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	gcloop_locked_relocated	
	addl	a5,d2	
	movl	a5,a7@	
	movb	#TC_BROKEN_HEART,a7@	
	lea	a5@(2*4),a5	
	movl	a7@,a2@+	
	movl	d0,a3@+	
	movl	a2@,a3@+	
	movl	d2,a4@+	
	cmpl	d6,a3	
	bcc	gcloop_get_more_heap	
	cmpl	a4,a3	
	bne	gcloop_dispatch	
	bra	gcloop_end	
gcloop_triple:	
	movl	d2,d0	
	andl	d7,d0	
	cmpl	d5,d0	
	bcc	gcloop_dont_relocate	
	movl	d0,a2	
	subl	a2,d2	
	movl	a2@,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	gcloop_relocated	
	movl	a2,a7@	
	jsr	_atomior32	
	cmpl	a7@(4),d0	
	beq	gcloop_locked	
	movl	d0,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	gcloop_locked_relocated	
	addl	a5,d2	
	movl	a5,a7@	
	movb	#TC_BROKEN_HEART,a7@	
	lea	a5@(3*4),a5	
	movl	a7@,a2@+	
	movl	d0,a3@+	
	movl	a2@+,a3@+	
	movl	a2@,a3@+	
	movl	d2,a4@+	
	cmpl	d6,a3	
	bcc	gcloop_get_more_heap	
	cmpl	a4,a3	
	bne	gcloop_dispatch	
	bra	gcloop_end	
gcloop_cell:	
	movl	d2,d0	
	andl	d7,d0	
	cmpl	d5,d0	
	bcc	gcloop_dont_relocate	
	movl	d0,a2	
	subl	a2,d2	
	movl	a2@,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	gcloop_relocated	
	movl	a2,a7@	
	jsr	_atomior32	
	cmpl	a7@(4),d0	
	beq	gcloop_locked	
	movl	d0,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	gcloop_locked_relocated	
	addl	a5,d2	
	movl	a5,a7@	
	movb	#TC_BROKEN_HEART,a7@	
	lea	a5@(1*4),a5	
	movl	a7@,a2@	
	movl	d0,a3@+	
	movl	d2,a4@+	
	cmpl	d6,a3	
	bcc	gcloop_get_more_heap	
	cmpl	a4,a3	
	bne	gcloop_dispatch	
	bra	gcloop_end	
gcloop_quad:	
	movl	d2,d0	
	andl	d7,d0	
	cmpl	d5,d0	
	bcc	gcloop_dont_relocate	
	movl	d0,a2	
	subl	a2,d2	
	movl	a2@,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	gcloop_relocated	
	movl	a2,a7@	
	jsr	_atomior32	
	cmpl	a7@(4),d0	
	beq	gcloop_locked	
	movl	d0,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	gcloop_locked_relocated	
	addl	a5,d2	
	movl	a5,a7@	
	movb	#TC_BROKEN_HEART,a7@	
	lea	a5@(4*4),a5	
	movl	a7@,a2@+	
	movl	d0,a3@+	
	movl	a2@+,a3@+	
	movl	a2@+,a3@+	
	movl	a2@,a3@+	
	movl	d2,a4@+	
	cmpl	d6,a3	
	bcc	gcloop_get_more_heap	
	cmpl	a4,a3	
	bne	gcloop_dispatch	
	bra	gcloop_end	
gcloop_future_splice:	
	movl	a0@(future_value_slot),a4@	
	bra	gcloop_dispatch	
gcloop_future:	
	movl	d2,d0	
	andl	d7,d0	
	movl	d0,a0	
	cmpl	#TC_TRUE*0x1000000+0,a0@(future_determined_slot)	
	bnes	gcloop_vector	
	tstl	a0@(future_lock_slot)	
	beq	gcloop_future_splice	
gcloop_vector:	
	movl	d2,d0	
	andl	d7,d0	
	cmpl	d5,d0	
	bcc	gcloop_dont_relocate	
	movl	d0,a2	
gcloop_vector_lock:	
	subl	a2,d2	
	movl	a2@,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	gcloop_relocated	
	movl	a2,a7@	
	jsr	_atomior32	
	cmpl	a7@(4),d0	
	beq	gcloop_locked	
	movl	d0,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	gcloop_locked_relocated	
	movl	d0,d1	
	andl	d7,d1	
	lea	a3@(vector_delta,d1:l:4),a0	
	cmpl	d6,a0	
	bhi	vector_get_more_heap	
gcloop_vector_continue:	
	addl	a5,d2	
	movl	a5,a7@	
	movb	#TC_BROKEN_HEART,a7@	
	lea	a5@(4,d1:l:4),a5	
	movl	a7@,a2@+	
	movl	d0,a3@+	
	bras	copy_vector_inner_test	
copy_vector_outer_loop:	
	swap	d1	
copy_vector_inner_loop:	
	movl	a2@+,a3@+	
copy_vector_inner_test:	
	dbf	d1,copy_vector_inner_loop	
	swap	d1	
	dbf	d1,copy_vector_outer_loop	
	movl	d2,a4@+	
	cmpl	d6,a3	
	bcc	gcloop_get_more_heap	
	cmpl	a4,a3	
	bne	gcloop_dispatch	
	bra	gcloop_end	
gcloop_compiled:	
	movl	d2,d0	
	andl	d7,d0	
	cmpl	d5,d0	
	bcc	gcloop_dont_relocate	
	movl	d0,a2	
	bras	enter_compiled_entry_to_block_loop	
compiled_entry_to_block_loop:	
	lea	a2@(1),a2	
enter_compiled_entry_to_block_loop:	
	movw	a2@(-2),d1	
	subw	d1,a2	
	lsrw	#1,d1	
	bcss	compiled_entry_to_block_loop	
	bra	gcloop_vector_lock	
gcloop_linkage:	
	tstb	a7@(1)	
	beq	gcloop_linkage_operator	
	movw	d2,d1	
	bras	linkage_quads_constant	
linkage_quads_loop:	
	movl	a4@,d2	
	cmpl	d5,d2	
	bcss	linkage_quads_relocate	
linkage_quads_constant:	
	addql	#4,a4	
linkage_quads_test:	
	dbf	d1,linkage_quads_loop	
	bra	gcloop_test	
linkage_quads_relocate:	
	movl	d2,a2	
	subl	a2,d2	
	movl	a2@,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	quad_relocated	
	movl	a2,a7@	
	jsr	_atomior32	
	cmpl	a7@(4),d0	
	beq	quad_locked	
	movl	d0,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	quad_locked_relocated	
	addl	a5,d2	
	movl	a5,a7@	
	movb	#TC_BROKEN_HEART,a7@	
	lea	a5@(16),a5	
	movl	a7@,a2@+	
	movl	d0,a3@+	
	movl	a2@+,a3@+	
	movl	a2@+,a3@+	
	movl	a2@,a3@+	
	movl	d2,a4@+	
	cmpl	d6,a3	
	bcs	linkage_quads_test	
	movl	d1,a7@-	
	pea	linkage_quads_test	
	bra	common_get_more_heap	
quad_locked_relocated:	
	movl	d0,a2@	
quad_relocated:	
	movl	a7@,d0	
quad_reloacted_common:	
	andl	d7,d0	
	movl	d0,a4@+	
	bra	linkage_quads_test	
quad_locked:	
	movl	a2@,d0	
	cmpl	a7@(4),d0	
	beq	quad_locked	
	bra	quad_reloacted_common	
gcloop_linkage_operator:	
	movw	d2,d1	
	lsrw	#1,d1	
	addql	#2,a4	
	lea	linkage_transport_continue,a0	
	movl	a0,a6@(-8)	
	bra	enter_linkage_operator_loop	
linkage_operator_loop:	
	addql	#8,a4	
	movl	a4@(-4),a2	
	cmpl	d5,a2	
	bcss	linkage_transport_entry	
enter_linkage_operator_loop:	
	dbf	d1,linkage_operator_loop	
	addql	#2,a4	
	bra	gcloop_test	
linkage_transport_entry:	
	movw	d1,a6@(-12)	
	movl	a2,d2	
	bra	enter_entry_to_block_loop	
linkage_transport_continue:	
	movw	a6@(-12),d1	
	bra	enter_linkage_operator_loop	
gcloop_closure:	
	lea	closure_loop_continue,a0	
	movl	a0,a6@(-8)	
	addql	#4,a4	
	bras	closure_loop_continue	
closure_loop:	
	addql	#6,a4	
	movl	a4@+,a2	
	cmpl	d5,a2	
	bcss	closure_transport_entry	
closure_loop_continue:	
	tstw	a4@	
	bne	closure_loop	
	movl	a4,d2	
	andb	#0xfc,d2	
	movl	d2,a4	
	bra	gcloop_dont_relocate	
closure_transport_entry:	
	movl	a2,d2	
	bras	enter_entry_to_block_loop	
entry_to_block_loop:	
	lea	a2@(1),a2	
enter_entry_to_block_loop:	
	movw	a2@(-2),d1	
	subw	d1,a2	
	lsrw	#1,d1	
	bcss	entry_to_block_loop	
	subl	a2,d2	
	movl	a2@,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	entry_relocated	
	movl	a2,a7@	
	jsr	_atomior32	
	cmpl	a7@(4),d0	
	beq	entry_locked	
	movl	d0,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	entry_locked_relocated	
	movl	d0,d1	
	andl	d7,d1	
	lea	a3@(vector_delta,d1:l:4),a0	
	cmpl	d6,a0	
	bhi	entry_get_more_heap_1	
copy_entry_continue:	
	addl	a5,d2	
	movl	a5,a7@	
	movb	#TC_BROKEN_HEART,a7@	
	lea	a5@(4,d1:l:4),a5	
	movl	a7@,a2@+	
	movl	d0,a3@+	
	bras	copy_entry_inner_test	
copy_entry_outer_loop:	
	swap	d1	
copy_entry_inner_loop:	
	movl	a2@+,a3@+	
copy_entry_inner_test:	
	dbf	d1,copy_entry_inner_loop	
	swap	d1	
	dbf	d1,copy_entry_outer_loop	
entry_end:	
	movl	d2,a4@(-4)	
	cmpl	d6,a3	
	bccs	entry_get_more_heap_2	
	movl	a6@(-8),a0	
	jmp	a0@	
entry_locked_relocated:	
	movl	d0,a2@	
entry_relocated:	
	movl	a7@,d0	
entry_relocated_common:	
	andl	d7,d0	
	addl	d0,d2	
	bra	entry_end	
entry_locked:	
	movl	a2@,d0	
	cmpl	a7@(4),d0	
	beq	entry_locked	
	bra	entry_relocated_common	
entry_get_more_heap_1:	
	pea	copy_entry_continue	
	bra	common_vector_get_more_heap	
entry_get_more_heap_2:	
	movl	a6@(-8),a7@-	
	bra	common_get_more_heap	
gcloop_weak_pair:	
	movl	d2,d0	
	andl	d7,d0	
	cmpl	d5,d0	
	bcc	gcloop_dont_relocate	
	movl	d0,a2	
	subl	a2,d2	
	movl	a2@,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	gcloop_relocated	
	movl	a2,a7@	
	jsr	_atomior32	
	cmpl	a7@(4),d0	
	beq	gcloop_locked	
	movl	d0,a7@	
	cmpb	#TC_BROKEN_HEART,a7@	
	beq	gcloop_locked_relocated	
	addl	a5,d2	
	movl	a5,a7@	
	movb	#TC_BROKEN_HEART,a7@	
	lea	a5@(2*4),a5	
	movl	a7@,a2@+	
	movl	d0,d1	
	andl	d7,d1	
	movl	d1,a3@+	
	movl	a2@,a3@+	
	subl	d1,d0	
	movl	_Weak_Chain,d1	
	movl	a4@,_Weak_Chain	
	andl	d7,d1	
	addl	d1,d0	
	movl	d0,a2@	
	movl	d2,a4@+	
	cmpl	d6,a3	
	bcc	gcloop_get_more_heap	
	cmpl	a4,a3	
	bne	gcloop_dispatch	
	bra	gcloop_end	
gcloop_broken_heart:	
	andl	d7,d2	
	addl	a6@(-4),d2	
	cmpl	d2,a4	
	beq	gcloop_end	
	movl	a4@,a7@-	
	pea	broken_heart_error_string	
	pea	_gc_death_message_buffer	
	jsr	_sprintf	
	lea	a7@(12),sp	
	moveq	#term_broken_heart,d0	
	bra	gcloop_death	
gcloop_get_more_heap:	
	pea	gcloop_test	
common_get_more_heap:	
	movl	a5,d0	
	addl	d3,d0	
	cmpl	a3,d0	
	bne	gcloop_phase_error	
	clrl	a7@-	
	pea	a5@	
	jsr	_get_new_consing_partition	
	lea	a7@(8),sp	
	movl	_cons_heaplet_bound,d6	
	addl	d3,d6	
	movl	d0,a5	
	movl	a5,a3	
	addl	d3,a3	
	rts
vector_get_more_heap:	
	pea	gcloop_vector_continue	
common_vector_get_more_heap:	
	movl	d0,a7@-	
	movl	a5,d0	
	addl	d3,d0	
	cmpl	a3,d0	
	bne	gcloop_phase_error	
	movl	d1,a7@-	
	pea	a5@	
	jsr	_get_new_consing_partition	
	lea	a7@(8),sp	
	movl	_cons_heaplet_bound,d6	
	addl	d3,d6	
	movl	d0,a5	
	movl	a5,a3	
	addl	d3,a3	
	movl	a7@+,d0	
	movl	d0,d1	
	andl	d7,d1	
	lea	a3@(vector_delta,d1:l:4),a0	
	cmpl	d6,a0	
	bhis	common_vector_out_of_space	
	rts
common_vector_out_of_space:	
	movl	_cons_heaplet_end,d1	
	subl	_cons_heaplet,d1	
	subql	#1,d1	
	lsrl	#2,d1	
	movl	d1,a7@-	
	andl	d7,d0	
	addql	#1,d0	
	movl	d0,a7@-	
	pea	vector_too_long_error_string	
	pea	_gc_death_message_buffer	
	jsr	_sprintf	
	lea	a7@(16),sp	
	moveq	#term_no_space,d0	
	bra	gcloop_death	
gcloop_phase_error:	
	movl	d3,a7@-	
	movl	a5,a7@-	
	pea	phase_error_string	
	pea	_gc_death_message_buffer	
	jsr	_sprintf	
	lea	a7@(16),sp	
	moveq	#term_exit,d0	
	bra	gcloop_death	
gcloop_bad_type:	
	movl	d2,a7@-	
	movl	d0,a7@-	
	pea	bad_type_code_error_string	
	pea	_gc_death_message_buffer	
	jsr	_sprintf	
	lea	a7@(16),sp	
	moveq	#term_invalid_type_code,d0	
	bra	gcloop_death	
gcloop_scan_overflow:	
	movl	d4,a7@-	
	addql	#4,a7@	
	pea	a4@	
	pea	nmv_overflow_error_string	
	pea	_gc_death_message_buffer	
	jsr	_sprintf	
	lea	a7@(16),sp	
	moveq	#term_exit,d0	
gcloop_death:	
	pea	a3@	
	pea	a4@	
	pea	_gc_death_message_buffer	
	movl	d0,a7@-	
	jsr	_gc_death	
real_death:	
	lea	a7@(16),sp	
real_death_loop:	
	movl	#1,a7@-	
	jsr	_exit	
	lea	a7@(4),sp	
	bra	real_death_loop	
	.align	4	
broken_heart_error_string:	
	.asciz	"gcloop: broken heart (0x%lx) in Scan"	
	.align	4	
nmv_overflow_error_string:	
	.asciz	"gcloop: NMV at 0x%x overflows heaplet ending at 0x%x"	
	.align	4	
vector_too_long_error_string:	
	.asciz	"gcloop: vector is too long (0d%d) for partition (0d%d)"	
	.align	4	
bad_type_code_error_string:	
	.asciz	"gcloop: bad type code (0x%02x), pointer = 0x%08x"	
	.align	4	
phase_error_string:	
	.asciz	"gcloop: phase error: To = 0x%x, delta = 0x%x"	
	.align	4	
